package patterns.chain;
/**
 * 
 * @author liuguoyu
 *责任链模式（Chain of Responsibility Pattern）

    使很多个对象都有机会处理请求，从而避免请求的发送者和接收者之间的耦合关系。将这些对象连成一条链，并沿着这条链传递该请求，直到有一个对象处理它为止。

    何时使用

    有许多对象可以处理用户请求，希望程序在运行期间自动确定处理用户的那个对象。
    希望用户不必明确指定接收者的情况下，想多个接受者的一个提交请求
    程序希望动态的指定可处理用户请求的对象集合
    优点

    低耦合
    可以动态的添加删除处理者或重新指派处理者的职责
    可以动态改变处理者之间的先后顺序
    通常来说，一个纯粹的责任链是先传给第一个处理，如果处理过了，这个请求处理就此结束，如果没有处理，再传给下一个处理者。

    比如我们有一个数学公式，有一个整数输入，要求小于0时返回绝对值，其次，小于10的时候返回他的二次幂，否则，返回他本身：
 */
public interface Handler {
	int handlerRequest(int n);
	void setNextHandler(Handler next);
}
